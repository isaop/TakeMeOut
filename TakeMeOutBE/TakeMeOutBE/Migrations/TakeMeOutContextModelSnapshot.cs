// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TakeMeOutBE.Database;

#nullable disable

namespace TakeMeOutBE.Migrations
{
    [DbContext(typeof(TakeMeOutContext))]
    partial class TakeMeOutContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TakeMeOutBE.Models.BusinessAccount", b =>
                {
                    b.Property<int>("IdBa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idBA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBa"));

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("contactNumber");

                    b.Property<string>("Country")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("country");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<int?>("IdVenue")
                        .HasColumnType("int")
                        .HasColumnName("idVenue");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdBa")
                        .HasName("PK__Business__9DB8DE821DC1CC20");

                    b.HasIndex("IdVenue");

                    b.HasIndex(new[] { "Name" }, "UQ__Business__72E12F1B2D4BF3CD")
                        .IsUnique()
                        .HasFilter("[name] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "UQ__Business__AB6E6164DDECB8BD")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.ToTable("BusinessAccount", (string)null);
                });

            modelBuilder.Entity("TakeMeOutBE.Models.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCategory");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategory"));

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("IdCategory")
                        .HasName("PK__Category__79D361B6C333322B");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("TakeMeOutBE.Models.Event", b =>
                {
                    b.Property<int?>("IdEvent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEvent");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("IdEvent"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("EventName")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("eventName");

                    b.Property<int?>("IdBa")
                        .HasColumnType("int")
                        .HasColumnName("idBA");

                    b.Property<int>("IdCategory")
                        .HasColumnType("int")
                        .HasColumnName("idCategory");

                    b.Property<int?>("IdEventStatus")
                        .HasColumnType("int")
                        .HasColumnName("idEventStatus");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<int>("IdVenue")
                        .HasColumnType("int")
                        .HasColumnName("idVenue");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time")
                        .HasColumnName("time");

                    b.HasKey("IdEvent")
                        .HasName("PK__Event__B7EA7D7610802020");

                    b.HasIndex("IdBa");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdEventStatus");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdVenue");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("TakeMeOutBE.Models.EventStatus", b =>
                {
                    b.Property<int>("IdEventStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEventStatus");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEventStatus"));

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdEventStatus")
                        .HasName("PK__EventSta__8BA84D2113D948A2");

                    b.ToTable("EventStatus", (string)null);
                });

            modelBuilder.Entity("TakeMeOutBE.Models.Order", b =>
                {
                    b.Property<int>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idOrder");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOrder"));

                    b.Property<int?>("IdEvent")
                        .HasColumnType("int")
                        .HasColumnName("idEvent");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("IdOrder")
                        .HasName("PK__Order__C8AAF6FF94A636C9");

                    b.HasIndex("IdEvent");

                    b.HasIndex("IdUser");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("TakeMeOutBE.Models.Payment", b =>
                {
                    b.Property<int>("IdPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPayment");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPayment"));

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.HasKey("IdPayment")
                        .HasName("PK__Payment__F22D4A455175E55E");

                    b.HasIndex("IdUser");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("TakeMeOutBE.Models.Review", b =>
                {
                    b.Property<int>("IdReview")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idReview");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReview"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("comment");

                    b.Property<int?>("IdEvent")
                        .HasColumnType("int")
                        .HasColumnName("idEvent");

                    b.Property<int?>("IdPayment")
                        .HasColumnType("int")
                        .HasColumnName("idPayment");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.HasKey("IdReview")
                        .HasName("PK__Review__04F7FE1049D2A0B7");

                    b.HasIndex("IdEvent");

                    b.HasIndex("IdPayment");

                    b.HasIndex("IdUser");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("TakeMeOutBE.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("country");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("surname");

                    b.HasKey("IdUser")
                        .HasName("PK__User__3717C982F140C6B3");

                    b.HasIndex(new[] { "Email" }, "UQ__User__AB6E6164986D442F")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("TakeMeOutBE.Models.UserAction", b =>
                {
                    b.Property<int>("IdUserAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idUserAction");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUserAction"));

                    b.Property<string>("ActionName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("actionName");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("description");

                    b.Property<int?>("IdEvent")
                        .HasColumnType("int")
                        .HasColumnName("idEvent");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.HasKey("IdUserAction")
                        .HasName("PK__userActi__7AE31280C8489D16");

                    b.HasIndex("IdEvent");

                    b.HasIndex("IdUser");

                    b.ToTable("userAction", (string)null);
                });

            modelBuilder.Entity("TakeMeOutBE.Models.Venue", b =>
                {
                    b.Property<int>("IdVenue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idVenue");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVenue"));

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("address");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("contactNumber");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("UniqueIden")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("uniqueIden");

                    b.HasKey("IdVenue")
                        .HasName("PK__Venue__077D5E69C89A79A3");

                    b.ToTable("Venue", (string)null);
                });

            modelBuilder.Entity("TakeMeOutBE.Models.BusinessAccount", b =>
                {
                    b.HasOne("TakeMeOutBE.Models.Venue", "IdVenueNavigation")
                        .WithMany("BusinessAccounts")
                        .HasForeignKey("IdVenue")
                        .HasConstraintName("FK__BusinessA__idVen__29572725");

                    b.Navigation("IdVenueNavigation");
                });

            modelBuilder.Entity("TakeMeOutBE.Models.Event", b =>
                {
                    b.HasOne("TakeMeOutBE.Models.BusinessAccount", "IdBaNavigation")
                        .WithMany("Events")
                        .HasForeignKey("IdBa")
                        .HasConstraintName("FK__Event__idBA__3B75D760");

                    b.HasOne("TakeMeOutBE.Models.Category", "IdCategoryNavigation")
                        .WithMany("Events")
                        .HasForeignKey("IdCategory")
                        .IsRequired()
                        .HasConstraintName("FK__Event__idCategor__3C69FB99");

                    b.HasOne("TakeMeOutBE.Models.EventStatus", "IdEventStatusNavigation")
                        .WithMany("Events")
                        .HasForeignKey("IdEventStatus")
                        .HasConstraintName("FK__Event__idEventSt__398D8EEE");

                    b.HasOne("TakeMeOutBE.Models.User", "IdUserNavigation")
                        .WithMany("Events")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Event__idUser__3A81B327");

                    b.HasOne("TakeMeOutBE.Models.Venue", "IdVenueNavigation")
                        .WithMany("Events")
                        .HasForeignKey("IdVenue")
                        .IsRequired()
                        .HasConstraintName("FK__Event__idVenue__38996AB5");

                    b.Navigation("IdBaNavigation");

                    b.Navigation("IdCategoryNavigation");

                    b.Navigation("IdEventStatusNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("IdVenueNavigation");
                });

            modelBuilder.Entity("TakeMeOutBE.Models.Order", b =>
                {
                    b.HasOne("TakeMeOutBE.Models.Event", "IdEventNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdEvent")
                        .HasConstraintName("FK__Order__idEvent__48CFD27E");

                    b.HasOne("TakeMeOutBE.Models.User", "IdUserNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Order__idUser__47DBAE45");

                    b.Navigation("IdEventNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("TakeMeOutBE.Models.Payment", b =>
                {
                    b.HasOne("TakeMeOutBE.Models.User", "IdUserNavigation")
                        .WithMany("Payments")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Payment__idUser__34C8D9D1");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("TakeMeOutBE.Models.Review", b =>
                {
                    b.HasOne("TakeMeOutBE.Models.Event", "IdEventNavigation")
                        .WithMany("Reviews")
                        .HasForeignKey("IdEvent")
                        .HasConstraintName("FK__Review__idEvent__3F466844");

                    b.HasOne("TakeMeOutBE.Models.Payment", "IdPaymentNavigation")
                        .WithMany("Reviews")
                        .HasForeignKey("IdPayment")
                        .HasConstraintName("FK__Review__idPaymen__412EB0B6");

                    b.HasOne("TakeMeOutBE.Models.User", "IdUserNavigation")
                        .WithMany("Reviews")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Review__idUser__403A8C7D");

                    b.Navigation("IdEventNavigation");

                    b.Navigation("IdPaymentNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("TakeMeOutBE.Models.UserAction", b =>
                {
                    b.HasOne("TakeMeOutBE.Models.Event", "IdEventNavigation")
                        .WithMany("UserActions")
                        .HasForeignKey("IdEvent")
                        .HasConstraintName("FK__userActio__idEve__440B1D61");

                    b.HasOne("TakeMeOutBE.Models.User", "IdUserNavigation")
                        .WithMany("UserActions")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__userActio__idUse__44FF419A");

                    b.Navigation("IdEventNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("TakeMeOutBE.Models.BusinessAccount", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("TakeMeOutBE.Models.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("TakeMeOutBE.Models.Event", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("UserActions");
                });

            modelBuilder.Entity("TakeMeOutBE.Models.EventStatus", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("TakeMeOutBE.Models.Payment", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("TakeMeOutBE.Models.User", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Reviews");

                    b.Navigation("UserActions");
                });

            modelBuilder.Entity("TakeMeOutBE.Models.Venue", b =>
                {
                    b.Navigation("BusinessAccounts");

                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
